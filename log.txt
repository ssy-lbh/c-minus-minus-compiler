Parsing from stdin...
1:(Name, int)
1:(Whitespace)
1:(Name, strcmp)
1:(Operator, ()
Function: strcmp
1:(Name, int)
1:(Operator, *)
1:(Whitespace)
1:(Name, a)
1:(Operator, ,)
Parameter Declare: a
1:(Whitespace)
1:(Name, int)
1:(Operator, *)
1:(Whitespace)
1:(Name, b)
1:(Operator, ))
Parameter Declare: b
1:(Operator, {)
1:(Whitespace)
2:(Name, while)
2:(Operator, ()
2:(Operator, ()
2:(Operator, *)
2:(Name, a)
2:(Whitespace)
2:(Operator, &)
2:(Whitespace)
2:(Int16, 0xFF)
2:(Operator, ))
2:(Whitespace)
2:(Operator, &&)
2:(Whitespace)
2:(Operator, ()
2:(Operator, *)
2:(Name, b)
2:(Whitespace)
2:(Operator, &)
2:(Whitespace)
2:(Int16, 0xFF)
2:(Operator, ))
2:(Operator, ))
2:(Operator, {)
2:(Whitespace)
3:(Name, if)
3:(Whitespace)
3:(Operator, ()
3:(Operator, ()
3:(Operator, *)
3:(Name, a)
3:(Whitespace)
3:(Operator, &)
3:(Whitespace)
3:(Int16, 0xFF)
3:(Operator, ))
3:(Whitespace)
3:(Operator, !=)
3:(Whitespace)
3:(Operator, ()
3:(Operator, *)
3:(Name, b)
3:(Whitespace)
3:(Operator, &)
3:(Whitespace)
3:(Int16, 0xFF)
3:(Operator, ))
3:(Operator, ))
3:(Operator, {)
3:(Whitespace)
4:(Name, return)
4:(Whitespace)
4:(Int10, 1)
4:(Semicolon, ;)
4:(Whitespace)
5:(Operator, })
5:(Whitespace)
6:(Name, a)
6:(Operator, ++)
6:(Semicolon, ;)
6:(Whitespace)
7:(Name, b)
7:(Operator, ++)
7:(Semicolon, ;)
7:(Whitespace)
8:(Operator, })
8:(Whitespace)
9:(Name, return)
9:(Whitespace)
9:(Operator, ()
9:(Operator, *)
9:(Name, a)
9:(Whitespace)
9:(Operator, &)
9:(Whitespace)
9:(Int16, 0xFF)
9:(Operator, ))
9:(Whitespace)
9:(Operator, !=)
9:(Whitespace)
9:(Operator, ()
9:(Operator, *)
9:(Name, b)
9:(Whitespace)
9:(Operator, &)
9:(Whitespace)
9:(Int16, 0xFF)
9:(Operator, ))
9:(Semicolon, ;)
9:(Whitespace)
10:(Operator, })
Function End strcmp
10:(Whitespace)
12:(Name, int)
12:(Whitespace)
12:(Name, getline)
12:(Operator, ()
Function: getline
12:(Name, int)
12:(Operator, *)
12:(Whitespace)
12:(Name, s)
12:(Operator, ))
Parameter Declare: s
12:(Operator, {)
12:(Whitespace)
13:(Name, int)
13:(Whitespace)
13:(Name, c)
13:(Semicolon, ;)
Declaration: c
13:(Whitespace)
14:(Name, int)
14:(Whitespace)
14:(Name, i)
14:(Whitespace)
14:(Operator, =)
Declaration: i
14:(Whitespace)
14:(Int10, 0)
14:(Semicolon, ;)
14:(Whitespace)
15:(Name, while)
15:(Operator, ()
15:(Operator, ()
15:(Name, c)
15:(Whitespace)
15:(Operator, =)
15:(Whitespace)
15:(Name, getchar)
15:(Operator, ()
Function Call: getchar
15:(Operator, ))
15:(Operator, ))
15:(Whitespace)
15:(Operator, !=)
15:(Whitespace)
15:(Operator, ))
15:(Operator, {)
15:(Whitespace)
16:(Operator, *)
16:(Operator, ()
16:(Name, s)
16:(Whitespace)
16:(Operator, +)
16:(Whitespace)
16:(Name, i)
16:(Operator, ))
16:(Whitespace)
16:(Operator, =)
16:(Whitespace)
16:(Name, c)
16:(Semicolon, ;)
16:(Whitespace)
17:(Name, i)
17:(Operator, ++)
17:(Semicolon, ;)
17:(Whitespace)
18:(Operator, })
18:(Whitespace)
19:(Operator, *)
19:(Operator, ()
19:(Name, s)
19:(Whitespace)
19:(Operator, +)
19:(Whitespace)
19:(Name, i)
19:(Operator, ))
19:(Whitespace)
19:(Operator, =)
19:(Whitespace)
19:(Semicolon, ;)
19:(Whitespace)
20:(Name, return)
20:(Whitespace)
20:(Name, i)
20:(Semicolon, ;)
20:(Whitespace)
21:(Operator, })
Function End getline
21:(Whitespace)
23:(Name, int)
23:(Whitespace)
23:(Name, main)
23:(Operator, ()
Function: main
23:(Operator, ))
23:(Operator, {)
23:(Whitespace)
24:(Name, int)
24:(Whitespace)
24:(Name, a)
24:(Operator, [)
Declaration: a
24:(Int10, 4)
24:(Operator, ])
24:(Semicolon, ;)
24:(Whitespace)
25:(Name, int)
25:(Whitespace)
25:(Name, i)
25:(Whitespace)
25:(Operator, =)
Declaration: i
25:(Whitespace)
25:(Int10, 0)
25:(Semicolon, ;)
25:(Whitespace)
27:(Name, while)
27:(Operator, ()
27:(Name, i)
27:(Whitespace)
27:(Operator, <)
27:(Whitespace)
27:(Int10, 4)
27:(Operator, ))
27:(Operator, {)
27:(Whitespace)
28:(Name, print)
28:(Operator, ()
Function Call: print
28:(String, "input: ")
28:(Operator, ))
28:(Semicolon, ;)
28:(Whitespace)
29:(Name, a)
29:(Operator, [)
29:(Name, i)
29:(Operator, ])
29:(Whitespace)
29:(Operator, =)
29:(Whitespace)
29:(Name, input)
29:(Operator, ()
Function Call: input
29:(Operator, ))
29:(Semicolon, ;)
29:(Whitespace)
30:(Name, i)
30:(Operator, ++)
30:(Semicolon, ;)
30:(Whitespace)
31:(Operator, })
31:(Whitespace)
33:(Name, i)
33:(Whitespace)
33:(Operator, =)
33:(Whitespace)
33:(Int10, 0)
33:(Semicolon, ;)
33:(Whitespace)
34:(Name, while)
34:(Operator, ()
34:(Name, i)
34:(Whitespace)
34:(Operator, <)
34:(Whitespace)
34:(Int10, 4)
34:(Operator, ))
34:(Operator, {)
34:(Whitespace)
35:(Name, print)
35:(Operator, ()
Function Call: print
35:(String, "output: ")
35:(Operator, ))
35:(Semicolon, ;)
35:(Whitespace)
36:(Name, output)
36:(Operator, ()
Function Call: output
36:(Name, a)
36:(Operator, [)
36:(Name, i)
36:(Operator, ])
36:(Operator, ))
36:(Semicolon, ;)
36:(Whitespace)
37:(Name, i)
37:(Operator, ++)
37:(Semicolon, ;)
37:(Whitespace)
38:(Operator, })
38:(Whitespace)
40:(Name, putchar)
40:(Operator, ()
Function Call: putchar
40:(Operator, ))
40:(Semicolon, ;)
40:(Whitespace)
42:(Name, int)
42:(Whitespace)
42:(Name, s1)
42:(Operator, [)
Declaration: s1
42:(Int16, 0x40)
42:(Operator, ])
42:(Semicolon, ;)
42:(Whitespace)
43:(Name, int)
43:(Whitespace)
43:(Name, s2)
43:(Operator, [)
Declaration: s2
43:(Int16, 0x40)
43:(Operator, ])
43:(Semicolon, ;)
43:(Whitespace)
45:(Line Comment, //output(&s1);
)
45:(Whitespace)
46:(Name, getchar)
46:(Operator, ()
Function Call: getchar
46:(Operator, ))
46:(Semicolon, ;)
46:(Whitespace)
47:(Name, print)
47:(Operator, ()
Function Call: print
47:(String, "input1: ")
47:(Operator, ))
47:(Semicolon, ;)
47:(Whitespace)
48:(Name, getline)
48:(Operator, ()
Function Call: getline
48:(Operator, &)
48:(Name, s1)
48:(Operator, ))
48:(Semicolon, ;)
48:(Whitespace)
49:(Name, print)
49:(Operator, ()
Function Call: print
49:(String, "input2: ")
49:(Operator, ))
49:(Semicolon, ;)
49:(Whitespace)
50:(Name, getline)
50:(Operator, ()
Function Call: getline
50:(Operator, &)
50:(Name, s2)
50:(Operator, ))
50:(Semicolon, ;)
50:(Whitespace)
52:(Name, output)
52:(Operator, ()
Function Call: output
52:(Name, s1)
52:(Operator, ))
52:(Semicolon, ;)
52:(Whitespace)
53:(Name, output)
53:(Operator, ()
Function Call: output
53:(Name, s2)
53:(Operator, ))
53:(Semicolon, ;)
53:(Whitespace)
55:(Name, if)
55:(Whitespace)
55:(Operator, ()
55:(Name, strcmp)
55:(Operator, ()
Function Call: strcmp
55:(Operator, &)
55:(Name, s1)
55:(Operator, ,)
55:(Whitespace)
55:(Operator, &)
55:(Name, s2)
55:(Operator, ))
55:(Operator, ))
55:(Operator, {)
55:(Whitespace)
56:(Name, println)
56:(Operator, ()
Function Call: println
56:(String, "not equal")
56:(Operator, ))
56:(Semicolon, ;)
56:(Whitespace)
57:(Operator, })
57:(Whitespace)
57:(Name, else)
57:(Whitespace)
57:(Operator, {)
57:(Whitespace)
58:(Name, println)
58:(Operator, ()
Function Call: println
58:(String, "equal")
58:(Operator, ))
58:(Semicolon, ;)
58:(Whitespace)
59:(Operator, })
59:(Whitespace)
61:(Name, return)
61:(Whitespace)
61:(Int10, 0)
61:(Semicolon, ;)
61:(Whitespace)
62:(Operator, })
Function End main

Parsing finished.
Function: getline
[IR_MOV] (v2 i0 i0)
[IR_PARAM] (i0 i0 i0)
[IR_CALL] (getchar v3)
[IR_MOV] (v1 v3 i0)
[IR_NE] (v4 v1 i10)
[IR_JMPNOT] (i12 v4 i0)
[IR_ADD] (v5 v0 v2)
[IR_MOV] (v6 v5 i0)
[IR_MOV] (p6 v1 i0)
[IR_ADD] (v2 v2 i1)
[IR_MOV] (v7 v2 i0)
[IR_JMP] (i0 i1 i0)
[IR_ADD] (v8 v0 v2)
[IR_MOV] (v9 v8 i0)
[IR_MOV] (p9 i0 i0)
[IR_RET] (i0 v2 i0)
Function: strcmp
[IR_MOV] (v2 v0 i0)
[IR_AND] (v3 p2 i255)
[IR_MOV] (v4 v1 i0)
[IR_AND] (v5 p4 i255)
[IR_LOGIC_AND] (v6 v3 v5)
[IR_JMPNOT] (i18 v6 i0)
[IR_MOV] (v7 v0 i0)
[IR_AND] (v8 p7 i255)
[IR_MOV] (v9 v1 i0)
[IR_AND] (v10 p9 i255)
[IR_NE] (v11 v8 v10)
[IR_JMPNOT] (i13 v11 i0)
[IR_RET] (i0 i1 i0)
[IR_ADD] (v0 v0 i1)
[IR_MOV] (v12 v0 i0)
[IR_ADD] (v1 v1 i1)
[IR_MOV] (v13 v1 i0)
[IR_JMP] (i0 i0 i0)
[IR_MOV] (v14 v0 i0)
[IR_AND] (v15 p14 i255)
[IR_MOV] (v16 v1 i0)
[IR_AND] (v17 p16 i255)
[IR_NE] (v18 v15 v17)
[IR_RET] (i0 v18 i0)
Function: main
[IR_MOV] (v4 i0 i0)
[IR_LT] (v5 v4 i4)
[IR_JMPNOT] (i14 v5 i0)
[IR_PARAM] (i0 i0 i0)
[IR_LEA] (v6 input: )
[IR_PASS] (i0 v6 i0)
[IR_CALL] (print v7)
[IR_ADD] (v8 i0 v4)
[IR_PARAM] (i0 i0 i0)
[IR_CALL] (input v9)
[IR_MOV] (r8 v9 i0)
[IR_ADD] (v4 v4 i1)
[IR_MOV